/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2021-09-12 15:03:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import score.dto.ScoreDTO;
import java.util.List;
import score.dao.ScoreDAO;

public final class scoreList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("score.dto.ScoreDTO");
    _jspx_imports_classes.add("score.dao.ScoreDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	int pg = Integer.parseInt(request.getParameter("pg"));
	// 1페이지당 목록 10개씩
	int endNum = pg*10;
	int startNum = endNum-9;
		
	// DB
	ScoreDAO dao = new ScoreDAO(); 
	List<ScoreDTO> list = dao.scoreList(startNum, endNum);
	
	//페이징 : 3블럭
	int totalA = dao.getTotalMember(); // 총 데이터의 갯수
	int totalP = (totalA + 9)/10;  // 총 페이지 수
	
	if(pg>totalP) pg = totalP;	// pg 수정	
	
	int startPage=(pg-1)/3*3+1; 
	int endPage=startPage+2; 
	if(endPage > totalP) {
		endPage = totalP;
	}

      out.write("  \n");
      out.write("   \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("	*{\n");
      out.write("	magin:0;\n");
      out.write("	padding:0;\n");
      out.write("	}\n");
      out.write("	html,body{\n");
      out.write("	width:100%;\n");
      out.write("	height:100%;\n");
      out.write("	position:absolute;\n");
      out.write("	}\n");
      out.write("	h1{\n");
      out.write("	text-align:center;\n");
      out.write("	}\n");
      out.write("	#wrapper{\n");
      out.write("	width:800px;\n");
      out.write("	position:absolute;\n");
      out.write("	top:10%;\n");
      out.write("	left:50%;\n");
      out.write("	margin-left:-400px;\n");
      out.write("	}\n");
      out.write("	table{\n");
      out.write("	background-color:linen;\n");
      out.write("	width:100%;\n");
      out.write("	height:100%;\n");
      out.write("	border-collapse:collapse;\n");
      out.write("	border-color:lightgray;\n");
      out.write("	}\n");
      out.write("	table td{\n");
      out.write("	text-align:center;\n");
      out.write("	}\n");
      out.write("	.paging{\n");
      out.write("	color:gray;\n");
      out.write("	text-decoration:none;\n");
      out.write("	}\n");
      out.write("	.currentPaging{\n");
      out.write("	color:red;\n");
      out.write("	font-size:1.2em;\n");
      out.write("	text-decoration:none;\n");
      out.write("	}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div id=\"wrapper\">\n");
      out.write("		<h1>::학생성적목록::</h1>\n");
      out.write("		<table border=\"1\">\n");
      out.write("			<tr>\n");
      out.write("				<th>학번</th>\n");
      out.write("				<th>이름</th>\n");
      out.write("				<th>국어</th>\n");
      out.write("				<th>영어</th>\n");
      out.write("				<th>수학</th>\n");
      out.write("				<th>총점</th>\n");
      out.write("				<th>평균</th>\n");
      out.write("			</tr>\n");
      out.write("			\n");
      out.write("			");
 for(ScoreDTO dto : list) { 
      out.write(" <!-- 모든 데이터 출력시 확장for문 사용가능: 간단-->\n");
      out.write("		    <tr align=\"center\" bgcolor=\"#ffffcc\">\n");
      out.write("		       <td>");
      out.print(dto.getId() );
      out.write("</td>\n");
      out.write("		       <td>");
      out.print(dto.getName() );
      out.write("</td>\n");
      out.write("		       <td>");
      out.print(dto.getKorean() );
      out.write("</td>\n");
      out.write("		       <td>");
      out.print(dto.getEnglish() );
      out.write("</td>\n");
      out.write("		       <td>");
      out.print(dto.getMath() );
      out.write("</td>\n");
      out.write("		       <td>");
      out.print(dto.getKorean() + dto.getEnglish() + dto.getMath()  );
      out.write("</td>\n");
      out.write("		       <td>");
      out.print((dto.getKorean() + dto.getEnglish() + dto.getMath())/3 );
      out.write("</td>\n");
      out.write("		     </tr> \n");
      out.write("		   ");
 } 
      out.write("\n");
      out.write("		   \n");
      out.write("		   	<!-- 페이징 -->\n");
      out.write("		   	<tr>\n");
      out.write("		         <td colspan=\"7\" align=\"center\">\n");
      out.write("		         ");
 if(startPage > 3){ 
      out.write("\n");
      out.write("		         	[<a class=\"paging\" href=\"scoreList.jsp?pg=");
      out.print(startPage-1);
      out.write("\">이전</a>]\n");
      out.write("		         ");
 } 
      out.write("\n");
      out.write("		         \n");
      out.write("		         ");
 for(int i=startPage; i<=endPage; i++){ 
      out.write("\n");
      out.write("		         	");
 if(pg==i){ 
      out.write("\n");
      out.write("		         	[<a class=\"currentPaging\" href=\"scoreList.jsp?pg=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</a>]\n");
      out.write("		         	");
 }else{ 
      out.write("\n");
      out.write("		         	[<a class=\"paging\" href=\"scoreList.jsp?pg=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</a>]\n");
      out.write("		         	");
 } 
      out.write("\n");
      out.write("		         ");
 } 
      out.write(" \n");
      out.write("		         \n");
      out.write("		    	 	");
 if(endPage < totalP){ 
      out.write("    \n");
      out.write("			         [<a class=\"paging\" href=\"scoreList.jsp?pg=");
      out.print(endPage+1);
      out.write("\">다음</a>]\n");
      out.write("			     ");
 } 
      out.write("    \n");
      out.write("		         </td>\n");
      out.write("		     </tr>\n");
      out.write("			 <tr align=\"center\">\n");
      out.write("				<td colspan=\"7\">\n");
      out.write("					<input type=\"button\" value=\"추가입력\" onclick=\"location.href='index.jsp'\">\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		</table>\n");
      out.write("	</div>	\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
